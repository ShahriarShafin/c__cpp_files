
#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *next;
    struct node *prev;
};

struct node *head;
struct node *tail;

void init()
{
    head=0;
    tail=0;
}

void insert(int val)
{
    struct node *newNode;
    newNode=(struct node*)malloc(sizeof(struct node));
    newNode->data=val;
    newNode->prev=0;

    newNode->next=head;
    if(head!=0)
        head->prev=newNode;
    else
        tail=newNode;
    head=newNode;
}

void push(int val)    //insult last
{
    struct node *newNode;
    newNode=(struct node*)malloc(sizeof(struct node));
    newNode->data=val;
    newNode->next=0;

    newNode->prev=tail;
    if(head!=0)
    {
        tail->next=newNode;
    }

    else
    {
        head=newNode;
    }

    tail=newNode;
}

void print()
{
    struct node *temp=head;
    while(temp!=0)
    {
        printf("%d ",temp->data);
        temp=temp->next;
    }
    printf("\n");
}

int length()//The function will return the length of the list
{

    int sum1=0;
    int i;
    struct node *temp=head;


    for(i=0; i<temp!=NULL; i++)
    {
        sum1=sum1+1;
        temp=temp->next;
    }
    printf("length  is %d\n",sum1);


}

void top()
{

    printf("%d\n",tail->data ) ;


}


void deleteFirst() //Queue no needed
{
    struct node * temp;

    temp = head;

    head = head->next;

    if (head != 0)
    {
        head->prev = 0;
        printf("SUCCESSFULLY Deleted The First Item.\n");
    }



    else if(head==NULL)
    {

        printf("There is no Item in the List.\n");

    }

}






void pop() //Stuck  DeleteLast
{

    struct node *temp;
    temp = tail;

    tail->prev->next = NULL;
    tail = tail->prev;


}

int main()
{
    init();
    int op;
    printf("1.PUSH ( Insult Last )\n");
    printf("2.Print Items\n");
    printf("4.POP ( last in 1st out.)\n");
    printf("5.Length \n");
    printf("6.Top \n");
    while(1)
    {

        scanf("%d",&op);
        /*   if(op==8)
           {
               int val;
               scanf("%d",&val);
               insert(val);
           }    */

        if(op==1)
        {
            int val;
            scanf("%d",&val);
            push(val);
        }


        else if(op==2)
        {
            print();
        }
        else if(op==3)
        {
            deleteFirst();
        }
        else if(op==4)
        {
            pop();  //DeleteLast
        }

        else if(op==5)
        {
            length();
        }
        else if(op==6)
        {
            top();
        }
    }

}
